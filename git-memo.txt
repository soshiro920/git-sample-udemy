■ローカルリポジトリ作成
・作業ディレクトリに移動 
cd ~

・新しいローカルリポジトリ作成
git init

■ファイル追加 add (「.」はすべてのフォルダ・ファイル)
git add [ファイル名]
git add .

■リポジトリに変更内容登録 commit (-mはコメント)
git commit -m "コメント入力"

■ブランチ設定
memo : ブランチは履歴の流れを分岐して記録していくための機能。
既存のブランチから新しいブランチを作成し、元のコードに影響を与えることなく、開発やバグ修正を試すことができる。

・ブランチ確認
git branch

・ブランチ作成
git branch [新しいブランチ名]

・ブランチ名変更 
#現在のブランチ名をブランチAに変更
git branch -m ブランチA
#ブランチAをブランチBに名前変更
git branch -m ブランチA ブランチB
memo : オプションが小文字のmの場合は同名ブランチがあると失敗する。大文字Mの場合は強制。

・ブランチ切り替え
git switch [ブランチ名]
#新ブランチ作成＋切り替え
switch -c [新しいブランチ名]

・ブランチ削除
git branch -d [削除したいブランチ名]

・2回目からはgit
■リモートリポジトリの追加 (設定していない場合、git push前に追加する必要がある)
git remote add [追加するリモートリポジトリ名] [追加したいリモートリポジトリURL]
git remote add origin https://github.com/soshiro920/git-sample-udemy.git

#リモートリポジトリ確認
git remote -v

■githubにアップロード push
・ローカルリポジトリの現在のブランチ(main)の上流を-uでorigin/mainに規定 
git push -u origin [ブランチ名]

・2回目からはgit pushのみでよい
git push

memo : 以下のコマンドでブランチの確認可能
##
上流ブランチの設定確認
git branch -vv

上流ブランチの変更
git branch -u [リモートリポジトリ名]/[ブランチ名]
git branch -u onrgin/main
##

memo : GitHubにアップしたくないファイル・フォルダがある場合、「.gitignore」に記載しておく

■プルリクエスト
memo : 以下のような機能がある
###
異なるブランチを合わせたい(merge)
コードがぶつかっていないか自動チェック(コンフリクト)
mergeする前にコードチェックしたい
確認した内容をコメントしたい
確認okなら合わせる(merge)
###
・プルリクエストの流れ(github側)
1.compare&pull Request ブランチ比較
2.create pull Request プルリクエスト作成
3.コード比較され問題なければ Merge pull Requestをクリック
4.Confirm merge をクリック
5.プルリクエストがマージ&クローズされる

■ブランチのマージ(ローカル側)
・マージされたいブランチになっている状態で
git merge ブランチ名
例)ブランチmainにブランチsubをマージ main←sub
git switch main
git merge sub

■補助系のコマンド
・コミット対象のファイル確認 (Vscodeでは同じような内容を拡張機能Git Graphで確認可能)
git status

・全コミットログ (Vscodeでは同じような内容を拡張機能Git Graphで確認可能)
git log
git log --oneline  #見やすい表示
git log --graph #グラフ化  onelineとgraph同時に使用も可

・設定確認
git config

・gitバージョン確認
git --version

・変更点を確認
git diff #コミット後に変更した場合、差分が見れる
git diff [ブランチ名] [ブランチ名] #ブランチの比較
git diff [コミットid] [コミットid] #2コミット間の比較

■リモートからのダウンロード
・まるごとダウンロード (git pull)
git clone [gitHubのurl] #リポジトリごとまるごとダウンロード

memo : 新しく空のフォルダを作成してそこで実行する(リポジトリもダウンロードされるため、通常gitが存在している場所では実行しない)
ブランチのダウンロードは1つのブランチのみ。ブランチを指定する場合は-bオプションを付ける、ダウンロード先のフォルダ指定も可
git clone -b [ブランチ名] [gitHubのurl] [ダウンロード先のフォルダ指定]

・差分ダウンロード+マージ (git pull)
git pull [リモートリポジトリ名] [ブランチ名]  #リモート側から差分ダウンロードしてマージ
例)
git pull origin main

・差分ダウンロードのみ (git fetch)
memo : git fetchするとリモート追跡リポジトリが更新される。(ローカル側でリモート側の状況を監視しているもの)
git branch -a  #リモート追跡用のブランチ確認(remotes/origin/main 等が表示される)
git fetch [リモートリポジトリ名] [ブランチ名]   #差分確認
例)
git fetch origin main
memo : 差分ダウンロードのみでマージはされないため、git diffやgit logで差分が確認できる(git diff remotes/origin/main)。VScodeのGitGraphでも確認可。

・差分ダウンロード後、マージする
git merge [ブランチ名]
例)
git merge remotes/origin/main

■取り消し系のコマンド
・addしていないコードを消したい
git clean -f [ファイル名]	#新規作成ファイルを消す
git restore [ファイル名]	#ファイル変更を取り消す
git restore .	#全ファイルの変更を取り消す

memo : リモート追跡ブランチとの差分を見ている。VScodeでは、[ソース管理]-[変更]で該当のファイルで[変更を破棄]することで同じことを実施可能。

・addを取り消す
git restore --staged [ファイル名]	#ファイル取り消し
git restore --staged .	#add全て取り消し
git reset [ファイル名]	#ファイル取り消し
git reset .	#add全て取り消し

memo : VScodeでは、[ソース管理]-[ステージングされている変更]で該当のファイルで[変更のステージング解除]することで同じことを実施可能。

・commitを取り消す
memo : HEADは現在の状態。resetはcommitをなかったことにする。
git reset --soft HEAD^	#staging状態まで戻す(commit前)
git reset --sof [コミットid] #コミットidを指定して戻すことも可能だが、現在ではなく1つ前のidを指定
git reset --mixed HEAD^	#add前まで戻す(ファイルは変更されている状態のまま)
git reset --hard HEAD^	#ファイル変更を取り消す(新しく作成していたファイルの場合は消える)

memo : 戻るのは現在の状態 → soft(staging) → mixed(add前) → hard = 以前の更新ポイント

・pushを取り消す
memo : pushの取り消しはresetとrevertがあり以下のイメージ
###
reset : コミット毎削除 (コミット履歴を残さない)
〇→〇→〇→●	#push
〇→〇→〇←🔵	#コミット削除

revert : 打消しコミットを作る (コミット履歴を残す)
〇→〇→〇→●		#push
〇→〇→〇→●→🔵	#取り消しコミットの作成
###
revertの場合
git revert [コミットid]		#取り消しコミットの作成。コミットidはGitGraphや[git log --oneline]等で確認可
git push	 #取り消しコミットのプッシュ

resetの場合
git reset --soft [コミットid]	#コミットid部分は現在のidではなく過去のidまたはHEAD^でも可
git push -f 	#強制push

・pull requestを取り消す(GitHub側)
プルリク前後に取り消す場合(マージ前)
git push --delete origin [ブランチ名]	#ブランチ削除

mergeしたプルリクを取り消す場合(マージ後)
GitHubの取り消したいPull request画面で[Revert]を実行、Revertのプルリクがopenされるのでそれをマージする。


・ローカルマージの取り消し(ローカル側)
memo : push取り消しと同様reset(履歴残さない)とrevert(履歴残す)でマージ取り消しが可能
git merge [ブランチ名]	#マージ

revertの場合
git revert -m 1 [コミットid]	#履歴残す。数字はgit showやgit logで確認(1か2)

例)git show (Merge部分の最初が1、次が2)
###
git show
commit 8c5161126a8885e1431b8071bd2a31a0ce87decc (HEAD -> 
main)
Merge: 7bcd00d b1654cd
Author: soshiro920 <oshiro4078@outlook.jp>
Date:   Mon Feb 24 02:49:07 2025 +0900

    Merge branch 'practice'
###
memo : git revertでマージ取り消し後、同じブランチで再度git mergeはできない(差分がない)。何か変更する必要がある。

resetの場合
git reset --hard ORIG_HEAD	#履歴残さない

・commitコメントを修正
最新コミットのコメントを修正する
git commit --amend -m "修正後のコメント"







