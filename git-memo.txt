■ローカルリポジトリ作成
・作業ディレクトリに移動 
cd ~

・新しいローカルリポジトリ作成
git init

■ファイル追加 add (「.」はすべてのフォルダ・ファイル)
git add [ファイル名]
git add .

■リポジトリに変更内容登録 commit (-mはコメント)
git commit -m "コメント入力"

■ブランチ設定
memo : ブランチは履歴の流れを分岐して記録していくための機能。
既存のブランチから新しいブランチを作成し、元のコードに影響を与えることなく、開発やバグ修正を試すことができる。

・ブランチ確認
git branch

・ブランチ作成
git branch [新しいブランチ名]

・ブランチ名変更 
#現在のブランチ名をブランチAに変更
git branch -m ブランチA
#ブランチAをブランチBに名前変更
git branch -m ブランチA ブランチB
memo : オプションが小文字のmの場合は同名ブランチがあると失敗する。大文字Mの場合は強制。

・ブランチ切り替え
git switch [ブランチ名]
#新ブランチ作成＋切り替え
switch -c [新しいブランチ名]

・ブランチ削除
git branch -d [削除したいブランチ名]

・2回目からはgit
■リモートリポジトリの追加 (設定していない場合、git push前に追加する必要がある)
git remote add [追加するリモートリポジトリ名] [追加したいリモートリポジトリURL]
git remote add origin https://github.com/soshiro920/git-sample-udemy.git

#リモートリポジトリ確認
git remote -v

■githubにアップロード push
・ローカルリポジトリの現在のブランチ(main)の上流を-uでorigin/mainに規定 
git push -u origin [ブランチ名]

・2回目からはgit pushのみでよい
git push

memo : 以下のコマンドでブランチの確認可能
##
上流ブランチの設定確認
git branch -vv

上流ブランチの変更
git branch -u リモートリポジトリ名/ブランチ
git branch -u onrgin/main
##

memo : GitHubにアップしたくないファイル・フォルダがある場合、「.gitignore」に記載しておく

■プルリクエスト
memo : 以下のような機能がある
###
異なるブランチを合わせたい(merge)
コードがぶつかっていないか自動チェック(コンフリクト)
mergeする前にコードチェックしたい
確認した内容をコメントしたい
確認okなら合わせる(merge)
###
・プルリクエストの流れ(github側)
1.compare&pull Request ブランチ比較
2.create pull Request プルリクエスト作成
3.コード比較され問題なければ Merge pull Requestをクリック
4.Confirm merge をクリック
5.プルリクエストがマージ&クローズされる

■ブランチのマージ(ローカル側)
・マージされたいブランチになっている状態で
git merge ブランチ名
例)ブランチmainにブランチsubをマージ main←sub
git switch main
git merge sub

■補助系のコマンド
・コミット対象のファイル確認 (Vscodeでは同じような内容を拡張機能Git Graphで確認可能)
git status

・全コミットログ (Vscodeでは同じような内容を拡張機能Git Graphで確認可能)
git log
git log --oneline  #見やすい表示
git log --graph #グラフ化  onelineとgraph同時に使用も可

・設定確認
git config

・gitバージョン確認
git --version

・変更点を確認
git diff #コミット後に変更した場合、差分が見れる
git diff [ブランチ名] [ブランチ名] #ブランチの比較
git diff [コミットid] [コミットid] #2コミット間の比較

■リモートからのダウンロード
・まるごとダウンロード (git pull)
git clone [gitHubのurl] #リポジトリごとまるごとダウンロード

memo : 新しく空のフォルダを作成してそこで実行する(リポジトリもダウンロードされるため、通常gitが存在している場所では実行しない)
ブランチのダウンロードは1つのブランチのみ。ブランチを指定する場合は-bオプションを付ける、ダウンロード先のフォルダ指定も可
git clone -b [ブランチ名] [gitHubのurl] [ダウンロード先のフォルダ指定]

・差分ダウンロード+マージ (git pull)
git pull    #差分ダウンロードしてマージ
git fetch   #差分確認

